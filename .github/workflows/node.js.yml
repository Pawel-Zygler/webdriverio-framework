name: automationstore.com e2e tests

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "**.md"
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      triggerSmokeTests:
        description: "Trigger Smoke Tests"
        required: false
        default: "false"

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install Allure Reporter
        run: npm install -g allure-commandline

      - name: Install dependencies and build
        run: |
          npm ci
          npm run build --if-present

      - name: Determine test command
        id: test_command
        run: |
          if [[ "${{ github.event.inputs.triggerSmokeTests }}" == "true" || "${{ github.event.head_commit.message }}" == *"smoke"* ]]; then
            echo "Running Smoke Tests"
            echo "::set-output name=TEST_CMD::npm run autostore:smoke"
          else
            echo "Running All Tests"
            echo "::set-output name=TEST_CMD::npm run autostore"
          fi

      - name: Run tests and generate Allure report
        run: ${{ steps.test_command.outputs.TEST_CMD }}

      - name: Archive Allure reports
        run: |
          tar -czf allure-reports.tar.gz allure-report allure-results

      - name: Upload Allure report archive as artifact
        uses: actions/upload-artifact@v2
        with:
          name: allure-reports-archive
          path: allure-reports.tar.gz

      - name: Change permissions
        run: chmod +x ./utils/db_connect.js

      - name: Upload Archive to Database
        if: false
        run: |
          ./utils/db_connect.js downloaded-artifacts/allure-reports.tar.gz
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}

      - name: Install MySQL Shell
        run: |
          sudo apt-get update
          wget https://repo.mysql.com/mysql-apt-config_0.8.17-1_all.deb
          sudo dpkg -i mysql-apt-config_0.8.17-1_all.deb
          sudo apt-get update
          sudo apt-get install -y mysql-shell
      - name: Connect to MySQL Database and Execute Command
        run: |
          mysqlsh --sql --host=${{ secrets.DB_HOST }} --user=${{ secrets.DB_USER }} --password=${{ secrets.DB_PASSWORD }} --database=${{ secrets.DB_NAME }} -e "SELECT * FROM cities;"
